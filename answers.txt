Про PHP
>>1. В чем по вашему мнению отличие php 8 от php7?
JIT есть теперь для сложной математики.
Язык взрослеет, активно стремится в «энтерпрайз». Из интересных новшеств особо приятны, на мой взгляд:
а) именованные параметры в функциях и методах, легко сделать код более читаемым без огромных DocBlocks
б) Атрибуты через # - отличная вещь. Я пока не раскрыл для себя всю их мощь, но опять же уменьшает количество строк в комментариях, уже хорошо.
в) match вместо swith-case не только красиво, но и теперь в качестве ключей можно выражения 

>>2. Что такое & в параметрах функции? Что делает он?
Передаёт параметр по ссылке. Если внутри функции он изменится, переданная внешняя переменная также изменит своё значение.

>>3. Можно ли написать $$lol , если да то что будет?
Можно. Эта запись укажет на переменную, имя которой содержит переменная $lol

>>4. Что такое PSR? 
Стандартные рекомендации от PHP-FIG по структурированию и оформлению кода в проектах. 
В основном предлагают интерфейсы для реализации некоторых шаблонов проектирования и частей кода фреймворков на php, а также вариант реализации для унификации части кода фреймворков.
PSR-4 для автолоадинга многие уже используют не задумываясь. Но есть ещё великолепные рекомендации по организации логирования, диспечера событий и т.д. 
Правило хорошего тона разработчика - следовать PSR в проектах. 

>>5. Что такое ORM?
Способ манипулирования данными БД в объектно-ориентированной парадигме (Без написания SQL-запросов… ну почти). В настоящий момент считается анти-паттерном.

>>6. В чем отличие абстрактного класса от интерфейса?
Наследовать свой класс можно только от одного абстрактного класса, в то время как в классе можно реализовать несколько интерфейсов.


Unit-тесты
>>1. Писали ли когда-либо Unit-тесты?
Нет. Только изучаю этот вопрос.

>>2. Что такое методы SetUp и TearDown
Стандартные методы тест-фреймворка, которые выполняются соответственно до наших тестов и после.
SetUp() {
  return “Начинаем упражнения…”;
}
Test1() {…}
Test2() {…}
…
TestN() {…}
TearDown() {
   $email = new \core\helpers\email();
   $email->send_message($asserts);
   return “..3, 4! Закончили!”;
}

>>3. Ecть база данных в котороую идет вставка и извлечение данных в коде. Также бывают сложные запросы, например с использованием оконных функций и не написать это через ORM. Как можно протестировать такой код?
Насколько я понимаю, задача тестирования – тестировать код, написанный программистом, а не работу БД. Поэтому, на мой взгляд, достаточно будет протестировать — верную ли строку запроса генерирует код по заданным параметрам. Поэтому для покрытия кода тестами разумнее разнести по разным методам (лучше даже классам) формирование строк запроса и их выполнение.  

>>4. Какие знаете фреймворке кроме phpunit?
Слышал, что есть ещё Codeception. Он, кажется, имеет интеграцию с  JenkinsCI из коробки. 
Ещё ребята, которым я помогал как devops, использовали Селениум. Самому писать на них ничего не довелось.


БД
>>1. Что такое партиции (partitions)? 
«Разбиение» таблицы (и индексов) на части по некоторому количеству строк или заданному диапазону значений в них. Что даёт прирост быстродействия в запросах выборки, если чаще запрашиваются только «свежие» данные. Как правило, достигается путем сохранения данных таблицы в разных файловых группах, при этом логика работы со стороны запросов SQL не меняется (код переписывать не нужно). Имеет смысл для таблиц с большим количеством строк. Оптимизируя работу с такими таблицами, ускоряем работу и экономим ресурсы.   

>>2. Что такое индекс в БД? Какой алогритм он использует? 
Служебная структура данных, создаваемая на основе сохранённых в БД данных, которая служит для ускорения поиска и операций выборки данных. Алгоритм бинарного дерева (b-tree) или алгоритм хеширования, например.


>>3. Какие типы БД занете кроме реляционных? 
Флаты (excel и т.п.), NoSQL (MongoDB)

MySQL
>>1. В чем отличие myisam от Innodb?
Формат InnoDB новее и чаще всего быстрее на больших объемах данных, всегда есть индекс и кеширование, блокировка на уровне строки (а не таблицы), «умеет» транзакции и внешние ключи. Myisam может быть сжат, InnoDB – нет. Кеширование можно организовать и средствами ОС или железа .

>>2. У меня есть таблциа в которой 100 млн записей. Есть текстовое поле. Как мне по нему быстро искать информацию?
Добавить FULLTEXT индекс. Но на таких размерах таблиц уже можно смотреть в сторону Elasticsearch и т.п. 
Думаю, от LIKE в запросах на 100млн.записей сервер захочет повеситься. MATCH может улучшить ситуацию, но он вроде только в MyISAM работает(не уверен).  

>>3. Есть сервис, допустим база цен товаров. Он обновлется кажыдй час и всталяет 100 т ыс записей. как быстро вставить такое количество записей в БД если вставка идет по уникальному ключу?
Посмотреть бы структуру БД…  Я бы попробовал так: cначала на всякий случай блокируем таблицу на запись, потом выполняем запрос (делаем что-то вроде):
foreach ($goods as $id => $price) {
   $query = ”UPDATE prices SET price=” . $price . ” WHEN id = “ . $id;
   …  здесь выполняем этот запрос.
}
после чего не забываем разблокировать таблицу. 
Может я не точно задачу понял? Вставить строки в базу или обновить цены на имеющиеся в базе товары?
Можно ещё вставить строки красиво в объектном стиле через подготавливаемый запрос с привязкой параметров (update, естественно, тоже так можно сделать):
$prequery = $mysqli->prepare("INSERT INTO prices (id, price) VALUES (?, ?)");
$prequery ->bind_param("id", $id, $price);  
foreach ($goods as $id => $price) {
    $prequery ->execute();
}
Кое-что, правда, смущает. Кажется, тут может быть проблема с превышением размера пакета(100k записей однако). Вместо execute() тогда придётся отправлять через send_long_data(). По этой причине, думаю, не стоит pdo использовать в этом кейсе и уж тем более ORM. Впрочем, могу ошибаться.

Если по принципу бритвы Оккама, то напрашивается  - формировать многострочный текст запроса с  учетом максимальной длины
в виде пакета вроде этого
"
INSERT INTO prices(id, price) VALUES(1, 10.50);
INSERT INTO prices(id, price) VALUES(2, 20.10);
...
INSERT INTO prices(id, price) VALUES(n, xxx.xx);
"
Потом из cli выполнять эти пакеты. Не очень красиво получается, зато почти как вручную. Как вариант, тоже имеет право на жизнь, IMHO.
Если задача - обновить имеющиеся данные и добавить новые одновременно... надо подумать ещё над алгоритмом.  

PostgreSQL
>>1. Можно ли обратитсяф к двум БД (не СХЕМАМ)?
Можно. Даже к разным серверам можно одновременно. Создать разные указатели для  pg_connect() в отдельные переменные. Указываем потом  этот указатель в pg_query первым параметром (перед текстом запроса). 

>>2. У меня есть таблциа в которой 100 млн записей. Есть текстовое поле. Как мне по нему быстро искать информацию?
К сожалению, опыта с PostrgreSQL совсем мало, поэтому в общих чертах… что нагуглил: Надо индекс к текстовому полю -  GIN или RUM в зависимости от характера/типа частых запросов.


Отказоустойчивость
>>1. У вас есть сервис котоырй принимает запрос и идет в БД за данными, а потом отдает его. Требуется поднять его отказоустойчивость. Как будете это делать?
а) использовать транзакции в запросах, разбить большие таблицы на partitions.
б) по возможности использовать кэширование или даже изменить схемы в БД.
То есть сначала пытаемся ускориться, чтобы php-скрипт не успевал умирать из-за долгих ответов от БД.  И юзеру опять же приятнее, и разрабам меньше головняка.
в) переписать его в асинхроне на nodejs :)))
г) Как админу, прежде всего на ум приходит запихать всё в кластер. 
д) Как разработчику, на ум приходят сервисы очередей типа RabbitMQ., что там ещё... redis

>>2. Есть оправка писем клиентам. SMTP сервер может падать, надо чтобы письма смогли отправиться, как только сервис поднимится и не потерять их. Как будете это делать?
Использовать очереди сообщений... кролика того же. 
Ну или по хардкору –  все сообщения сначала в БД, дальше свой скрипт отправки по cron’у, например. И для каждого сообщения менять статус флага по ответу от SMTP-сервера после отправки… или удалять сообщение из БД.

>>3. У вас есть какой то веб сервис дпоустим на адрес rpi.test.ru (http://rpi.test.ru/). На нем стоит nginx+php-fpm,. Вы вынесли какую то часть этого кода в другой сервис т.е на другой url адрес. Но прод продолжает слать запросы на rpi.test.ru (http://rpi.test.ru/)(старый). Как бы вы перенаправили такие запросы?
/* На старом месте: */
header(“Location:  “ . $newuri  , true, 301);  /* Костыль, конечно…*/ 
С GET-запросами точно будет работать,  а вот с POST- … придётся, видимо, ещё хедеров добавлять. Затрудняюсь здесь без экспериментов точно ответить.
Думается, такие вопросы лучше на уровне web-сервера решать – редиректами в конфиге nginx.

Linux
>>1. Что такое php-fpm
Менеджер процессов PHP. Связка Nginx + php-fpm сейчас - стандарт практически. PHP в качестве модуля Apache уже почти никто не использует, потому что с Nginx быстрее и стабильнее.

>>2. Вам позвонили днем и сказали прод упал, у вас есть root доступ к серверу. как будете искать ошибку?
Cмотреть в /var/log/… в зависимости от конфигурации сервера. Ещё логи самого app, если предусмотрены разрабом. Хотя прежде (я ж админ) глянул бы по-быстрому ss (или netstat),  “free –m”, потом top’нул и df-нул, мало ли... может кто-то на сервере поселился ненужный, банально ресурсы пожраны до критических значений.

>>3. Поняли что выполняются долго запросы к БД. как будете в ней искать какой это запрос и какие возможны варианты оптимизации?
Если БД -  MySQL, активируем запись медленных запросов в файл (в настройках параметры log-slow-queries и log-queries-not-using-indexes). Тестируем эти запросы в консоли (убеждаемся, что проблема в данных и запросах, а не в сети или ещё в чем-то). Варианты оптимизации: добавить или убрать индексы в зависимости от типа запросов, партишены сделать. Если сами запросы не оптимизировать никак, можно заняться тюнингом MySQL: дать ему больше ресурсов, может быть перенести БД в другое хранилище... 
В PostgreSQL включаем расширение pg_stat_statements и анализируем собранные данные. Наверняка сообщество ещё кучу инструментов понаписало для этого.
Независимо от СУБД можно буфер для I/O-операций увеличить или перенести БД в более быстрое хранилище.  
